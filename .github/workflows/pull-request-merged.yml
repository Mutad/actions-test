name: Pull Request Merged
on:
  issues:
    types: [closed]
  workflow_dispatch:
    inputs:
      issue_id:
        description: "Issue Number"
        required: true
jobs:
  move-issue-card:
    # only run if PR is merged and target branch is staging (or if manually triggered)
    # if: github.event.pull_request.merged == true && (github.event.pull_request.base.ref == 'main' || github.event.pull_request.base.ref == 'staging')

    permissions:
      issues: write
      
    runs-on: ubuntu-latest
    # give the workflow access to the projectv2 API
    steps:
      - name: Generate token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          # To access the projectv2 API, we need to create a GitHub App
          # because the projectv2 API needs organization permissions
          # and personal access tokens don't have access to organization permissions
          app-id: 787639
          # App private key stored in repo secrets
          private-key: ${{ secrets.APP_KEY }}

      # Get array of issues linked to PR with project items
      - name: Get Cards Linked to Issue
        id: gather-cards
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
          ISSUE_ID: ${{ github.event.issue.node_id }}
          INPUT_ISSUE_ID: ${{ github.event.inputs.issue_id }}
        run: |
          # if INPUT_ISSUE_ID is set, use that instead of ISSUE_ID
          if [ -n "$INPUT_ISSUE_ID" ]; then
            # ISSUE_ID is given, get the ISSUE node id from the ISSUE number
            ISSUE_ID="$( gh api graphql -f query='
            query {
              repository(owner: "'"$GITHUB_REPOSITORY_OWNER"'", name: "'"${{github.event.repository.name}}"'") {
                issue(number: '"$INPUT_ISSUE_ID"') {
                  id
                }
              }
            }' --jq '.data.repository.pullRequest.id')"
          fi

          echo "Status column: $STATUS_COLUMN"

          issue="$( gh api graphql -f query='
          query {
            node(id: "'"$ISSUE_ID"'") {
              ... on Issue {
                id
                number
                title
                url
                assignees(first: 100) {
                  nodes {
                    login
                    url
                  }
                }
                linkedBranches(last: 100) {
                  edges {
                    node {
                      id
                      ref {
                        name
                        associatedPullRequests(last: 10) {
                          edges {
                            node {
                              id
                              merged
                              baseRef {
                                name
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                projectItems(first: 100) {
                  edges {
                    node {
                      project {
                        id
                        title
                        field(name: "Status") {
                          ... on ProjectV2SingleSelectField {
                            id
                            production: options(names: "Production") {
                              id
                              name
                            }
                            staging: options(names: "Staging") {
                              id
                              name
                            }
                          }
                        }
                      }
                      id
                      title: fieldValueByName(name: "Title") {
                        ... on ProjectV2ItemFieldTextValue {
                          text
                        }
                      }
                      status: fieldValueByName(name: "Status") {
                        ... on ProjectV2ItemFieldSingleSelectValue {
                          id
                          optionId
                        }
                      }
                    }
                  }
                }
              }
            }
          }'"
          echo "issue=$issue" >> $GITHUB_OUTPUT
      - name: Move Cards
        id: move-cards
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
          ISSUES: ${{ steps.gather-cards.outputs.issues }}
        shell: python
        run: |
          import requests
          import os
          import json

          token = os.environ['GH_TOKEN']
          headers = {"Authorization": "Bearer " + token}
          def run_query(query): # A simple function to use requests.post to make the API call. Note the json= section.
            request = requests.post('https://api.github.com/graphql', json={'query': query}, headers=headers)
            if request.status_code == 200:
                return request.json()
            else:
                raise Exception("Query failed to run by returning code of {}. {}".format(request.status_code, query))
          
          # get issues from env and parse json
          issue = json.loads(os.environ['ISSUES'])
          print("issue=" + str(issues))
          slack_messages = [
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "*New issue ready for QA!*"
              }
            },
            {
              "type": "section",
              "fields": [
                {
                  "type": "mrkdwn",
                  "text": "*Issue:*\n<${{ github.event.issue.html_url }}|${{ github.event.issue.title }}>"
                },
                {
                  "type": "mrkdwn",
                  "text": "*Repository:*\n<${{ github.event.repository.html_url }}|${{ github.event.repository.full_name }}>"
                },
                {
                  "type": "mrkdwn",
                  "text": "*Opened By:*\n<${{ github.event.issue.user.html_url }}|${{ github.event.issue.user.login }}>"
                },
                {
                  "type": "mrkdwn",
                  "text": "*Linked Branch:*\n${{ github.event.pull_request.head.ref }}"
                },
                {
                  "type": "mrkdwn",
                  "text": "*Assignees:*\n${{ join(github.event.issue.assignees.*.login, ', ') }}"
                }
              ]
            },
          ]

          isMerged = issue["node"]["linkedBranches"]["edges"][0]["node"]["ref"]["associatedPullRequests"]["edges"][0]["node"]["merged"]
          print("isMerged=" + str(isMerged))

          # if PR is not merged, don't move cards
          if not isMerged:
            print("PR is not merged, not moving cards")
            exit(0)

          # get merge target branch
          targetBranch = issue["node"]["linkedBranches"]["edges"][0]["node"]["ref"]["associatedPullRequests"]["edges"][0]["node"]["baseRef"]["name"]

          if (targetBranch != "staging" and targetBranch != "main"):
            print("PR is not merged into staging or main, not moving cards")
            exit(0)

          for projectItem in issue["node"]["projectItems"]["edges"]:
            project_id = projectItem["node"]["project"]["id"]
            project_name = projectItem["node"]["project"]["title"]

            # get field value id for the target branch
            field_value_id = projectItem["node"]["project"]["field"]["staging"][0]["id"] if targetBranch == "staging" else projectItem["node"]["project"]["field"]["production"][0]["id"]

            print("Issue linked to project: " + project_name)
            item_id = projectItem["node"]["id"]
            item_field_id = projectItem["node"]["project"]["field"]["id"]
            # update the project item field value
            query = """
            mutation {
              updateProjectV2ItemFieldValue(
                input: {
                  projectId: "%s"
                  itemId: "%s"
                  fieldId: "%s"
                  value: {
                    singleSelectOptionId: "%s"
                  }
                }
              ) {
                clientMutationId
              }
            }
            """ % (project_id, item_id, item_field_id, field_value_id)
            print("Query: " + query)
            result = run_query(query) # Execute the query
            print("Result: " + str(result))
          
          # set slack messages to output
          print(json.dumps(slack_messages))
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            print("slack_messages=" + json.dumps(slack_messages), file=f)
      - name: Get QA Channel ID
        id: get-qa-channel-id
        if: github.event.pull_request.base.ref == 'main'
        env:
          username_to_channel_id: ${{ vars.USERNAME_TO_CHANNEL_ID }}
        run: |
          # get QA channel number
          for i in $username_to_channel_id; do
            # USERNAME=CHANNEL_ID
            USERNAME=$(echo $i | cut -d'=' -f1)
            CHANNEL_ID=$(echo $i | cut -d'=' -f2)
            if [ "$USERNAME" == "QA" ]; then
              QA_CHANNEL_ID=$CHANNEL_ID
            fi
          done
          # output QA channel id
          echo "QA channel id: $QA_CHANNEL_ID"
          echo "QA_CHANNEL_ID=$QA_CHANNEL_ID" >> $GITHUB_OUTPUT
      - name: Slack Notification
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          slack_messages: ${{ steps.move-cards.outputs.slack_messages }}
        # run only if QA channel id is set
        if: steps.get-qa-channel-id.outputs.QA_CHANNEL_ID != ''
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ steps.get-qa-channel-id.outputs.QA_CHANNEL_ID }}
          payload: |
            {
              "unfurl_links": false,
              "unfurl_media": false,
              "text": "New PR ready for QA!",
              "blocks": ${{ steps.move-cards.outputs.slack_messages }}
            }

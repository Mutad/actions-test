name: Pull Request Merged
on:
  pull_request:
    types: [closed]
  workflow_dispatch:
    inputs:
      pr_id:
        description: "Pull Request ID"
        required: true
jobs:
  move-issue-card:
    #if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Gather Cards
        id: gather-cards
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_ID: ${{ github.event.pull_request.node_id }}
          INPUT_PR_ID: ${{ github.event.inputs.pr_id }}
        run: |
          # if INPUT_PR_ID is set, use that instead of PR_ID
          if [ -n "$INPUT_PR_ID" ]; then
            PR_ID=$INPUT_PR_ID
          fi

          issues="$( gh api graphql -f query='
          query {
            node (id: "'$PR_ID'") {
              ... on PullRequest {
                closingIssuesReferences(first: 10) {
                  edges {
                    node {
                      ... on Issue {
                        id
                        projectCards(first: 100) {
                          nodes {
                            ... on ProjectCard {
                              id
                              project {
                                id
                                name
                                columns (first: 100) {
                                  nodes {
                                    id
                                    databaseId
                                    name
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }' --jq '.data.node.closingIssuesReferences.edges')"
          echo "issues=$issues" >> $GITHUB_OUTPUT
      - name: Move Cards
        id: move-cards
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: python
        run: |
          import requests
          import os

          token = os.environ['GH_TOKEN']
          headers = {"Authorization": "Bearer " + token}
          def run_query(query): # A simple function to use requests.post to make the API call. Note the json= section.
            request = requests.post('https://api.github.com/graphql', json={'query': query}, headers=headers)
            if request.status_code == 200:
                return request.json()
            else:
                raise Exception("Query failed to run by returning code of {}. {}".format(request.status_code, query))
          issues = ${{ steps.gather-cards.outputs.issues }}
          for issue in issues:
            issue_id = issue["node"]["id"]
            print("Found linked issue: " + issue_id)
            for projectCard in issue["node"]["projectCards"]["nodes"]:
              project_id = projectCard["project"]["id"]
              project_name = projectCard["project"]["name"]
              print("Issue linked to project: " + project_name)
              # find the column named "Done"
              for column in projectCard["project"]["columns"]["nodes"]:
                if column["name"] == "Done":
                  column_id = column["id"]
                  column_db_id = column["databaseId"]
                  print("Moving card to column: " + column["name"] + " " + column_id)
                  # move the card to the "Done" column
                  query = """
                  {
                    mutation {
                      moveProjectCard(input: {cardId: "%s", columnId: "%s"}) {
                      clientMutationId
                    }
                  }
                  """ % (projectCard["id"], column_id)
                  print("Query: " + query)
                  result = run_query(query) # Execute the query

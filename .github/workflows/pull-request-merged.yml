name: Pull Request Merged
on:
  pull_request:
    types: [closed]
  workflow_dispatch:
    inputs:
      pr_id:
        description: "Pull Request ID"
        required: true
jobs:
  close-issue:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Get linked issues of a PR
        id: get-linked-issues
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_ID: ${{ github.event.pull_request.node_id }}
        run: |
          # Note: i'm not sure if this is the best way to get the linked issue id
          # but it works for now
          # Returns array of linked issues ids "1 2 3"
          linked_issue_ids="$( gh api graphql -f query='
          query ($id: ID!) {
            node(id: $id) {
              ... on PullRequest {
                timelineItems(first: 100, itemTypes: [CONNECTED_EVENT]) {
                  nodes {
                    ... on ConnectedEvent {
                      subject {
                         ... on Issue { number }
                      }
                    }
                  }
                }
              }
            }
          }' -f id=$PR_ID --jq '.data.node.timelineItems.nodes[].subject.number')"

          echo "Linked Issue IDs: $linked_issue_ids"

          for ISSUE_ID in $linked_issue_ids; do
            echo "Issue ID: $ISSUE_ID"

            # Check that ISSUE_ID is set and is an integer
            if ! [[ "$ISSUE_ID" =~ ^[0-9]+$ ]]; then
              echo "Invalid issue ID: $ISSUE_ID"
              continue
            fi

            # get the project card ID associated with the issue
            project_card_id="$( gh api graphql -f query='
            query ($number: Int!) {
              repository(owner: "${{github.repository_owner}}", name: "${{github.event.repository.name}}") {
                issue(number: $number) {
                  projectCards(first: 100) {
                    nodes {
                      id
                    }
                  }
                }
              }
            }' -F number=$ISSUE_ID --jq '.data.repository.issue.projectCards.nodes[].id')"

            echo "Project Card ID: $project_card_id"

            if [ -z "$project_card_id" ]; then
              echo "No project card found for issue $ISSUE_ID"
              continue
            fi

            column_id=19726775

            # move the project card to the "Done" column
            gh api graphql -f query='
            mutation {
              moveProjectCard(
                input: {
                  cardId: "'$project_card_id'"
                  columnId: "'$column_id'"
                }
              ) {
                cardEdge {
                  node {
                    content {
                      ... on Issue {
                        title
                      }
                    }
                  }
                }
              }
            }'
          done

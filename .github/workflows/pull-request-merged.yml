name: Pull Request Merged
on:
  pull_request:
    types: [closed]
  workflow_dispatch:
    inputs:
      pr_id:
        description: "Pull Request Number"
        required: true
jobs:
  move-issue-card:
    # only run if PR is merged and target branch is staging (or if manually triggered)
    if: github.event.pull_request.merged == true && (github.event.pull_request.base.ref == 'main' || github.event.pull_request.base.ref == 'staging')

    permissions:
      issues: write
      
    runs-on: ubuntu-latest
    # give the workflow access to the projectv2 API
    steps:
      - name: Generate token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          # To access the projectv2 API, we need to create a GitHub App
          # because the projectv2 API needs organization permissions
          # and personal access tokens don't have access to organization permissions
          app-id: 787639
          # App private key stored in repo secrets
          private-key: ${{ secrets.APP_KEY }}

      # Get array of issues linked to PR with project items
      - name: Gather Cards
        id: gather-cards
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
          PR_ID: ${{ github.event.pull_request.node_id }}
          INPUT_PR_ID: ${{ github.event.inputs.pr_id }}
        run: |
          # if INPUT_PR_ID is set, use that instead of PR_ID
          if [ -n "$INPUT_PR_ID" ]; then
            # PR_ID is given, get the PR id from the PR number
            PR_ID="$( gh api graphql -f query='
            query {
              repository(owner: "'"$GITHUB_REPOSITORY_OWNER"'", name: "'"${{github.event.repository.name}}"'") {
                pullRequest(number: '"$INPUT_PR_ID"') {
                  id
                }
              }
            }' --jq '.data.repository.pullRequest.id')"
          fi

          # if branch is main, set status field to production otherwise set to staging
          if [ "${{ github.event.pull_request.base.ref }}" == "main" ]; then
            STATUS_COLUMN="Production"
          else
            STATUS_COLUMN="Staging"
          fi

          echo "Status column: $STATUS_COLUMN"

          issues="$( gh api graphql -f query='
          query {
            node(id: "'"$PR_ID"'") {
              ... on PullRequest {
                number
                closingIssuesReferences(first: 10) {
                  edges {
                    node {
                      ... on Issue {
                        id
                        number
                        title
                        url
                        assignees(first:100) {
                          nodes {
                            login
                            url
                          }
                        }
                        projectItems(last: 100) {
                          edges {
                            node {
                              project {
                                id
                                title
                                field(name: "Status") {
                                  ... on ProjectV2SingleSelectField {
                                    id
                                    options(names: "'"$STATUS_COLUMN"'") {
                                      id
                                      name
                                    }
                                  }
                                }
                              }
                              id
                              title: fieldValueByName(name: "Title") {
                                ... on ProjectV2ItemFieldTextValue {
                                  text
                                }
                              }
                              status: fieldValueByName(name: "Status") {
                                ... on ProjectV2ItemFieldSingleSelectValue {
                                  id
                                  optionId
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }' --jq '.data.node.closingIssuesReferences.edges')"
          echo "issues=$issues" >> $GITHUB_OUTPUT
      - name: Move Cards
        id: move-cards
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
          ISSUES: ${{ steps.gather-cards.outputs.issues }}
        shell: python
        run: |
          import requests
          import os
          import json

          token = os.environ['GH_TOKEN']
          headers = {"Authorization": "Bearer " + token}
          def run_query(query): # A simple function to use requests.post to make the API call. Note the json= section.
            request = requests.post('https://api.github.com/graphql', json={'query': query}, headers=headers)
            if request.status_code == 200:
                return request.json()
            else:
                raise Exception("Query failed to run by returning code of {}. {}".format(request.status_code, query))
          
          # get issues from env and parse json
          issues = json.loads(os.environ['ISSUES'])
          slack_messages = [
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "New PR ready for QA!"
              }
            },
            {
              "type": "section",
              "fields": [
                {
                  "type": "mrkdwn",
                  "text": "*PR:*\n<${{ github.event.pull_request.html_url }}|${{ github.event.pull_request.title }}>"
                },
                {
                  "type": "mrkdwn",
                  "text": "*Repository:*\n<${{ github.event.repository.html_url }}|${{ github.event.repository.full_name }}>"
                },
                {
                  "type": "mrkdwn",
                  "text": "*Opened By:*\n<${{ github.event.pull_request.user.html_url }}|${{ github.event.pull_request.user.login }}>"
                }
              ]
            },
            {
              "type": "context",
              "elements": [
                {
                  "type": "image",
                  "image_url": "https://api.slack.com/img/blocks/bkb_template_images/notificationsWarningIcon.png",
                  "alt_text": "notifications warning icon"
                },
                {
                  "type": "mrkdwn",
                  "text": "*Resolved issues: " + str(len(issues)) + "*"
                }
              ]
            },
            {
              "type": "divider"
            }
          ]
          print(issues)
          for issue in issues:
            print("enter loop")
            print(issue)
            issue_id = issue["node"]["id"]
            print("Found linked issue: " + issue_id)

            assignees = []
            for assignee in issue["node"]["assignees"]["nodes"]:
              assignees.append("<" + assignee["url"] + "|" + assignee["login"] + ">")

            # add issue to slack message
            slack_messages.append(
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*"+issue["node"]["title"]+"*\n" + ", ".join(assignees)
                },
                "accessory": {
                  "type": "button",
                  "text": {
                    "text": "Open",
                    "type": "plain_text"
                  },
                  "url": issue["node"]["url"]
                }
              }
            )

            for projectItem in issue["node"]["projectItems"]["edges"]:
              project_id = projectItem["node"]["project"]["id"]
              project_name = projectItem["node"]["project"]["title"]
              field_value_id = projectItem["node"]["project"]["field"]["options"][0]["id"]
              print("Issue linked to project: " + project_name)
              item_id = projectItem["node"]["id"]
              item_field_id = projectItem["node"]["project"]["field"]["id"]
              # update the project item field value
              query = """
              mutation {
                updateProjectV2ItemFieldValue(
                  input: {
                    projectId: "%s"
                    itemId: "%s"
                    fieldId: "%s"
                    value: {
                      singleSelectOptionId: "%s"
                    }
                  }
                ) {
                  clientMutationId
                }
              }
              """ % (project_id, item_id, item_field_id, field_value_id)
              print("Query: " + query)
              result = run_query(query) # Execute the query
              print("Result: " + str(result))
          
          # set slack messages to output
          print(json.dumps(slack_messages))
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            print("slack_messages=" + json.dumps(slack_messages), file=f)
      - name: Get QA Channel ID
        id: get-qa-channel-id
        if: github.event.pull_request.base.ref == 'main'
        env:
          username_to_channel_id: ${{ vars.USERNAME_TO_CHANNEL_ID }}
        run: |
          # get QA channel number
          for i in $username_to_channel_id; do
            # USERNAME=CHANNEL_ID
            USERNAME=$(echo $i | cut -d'=' -f1)
            CHANNEL_ID=$(echo $i | cut -d'=' -f2)
            if [ "$USERNAME" == "QA" ]; then
              QA_CHANNEL_ID=$CHANNEL_ID
            fi
          done
          # output QA channel id
          echo "QA channel id: $QA_CHANNEL_ID"
          echo "QA_CHANNEL_ID=$QA_CHANNEL_ID" >> $GITHUB_OUTPUT
      - name: Slack Notification
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          slack_messages: ${{ steps.move-cards.outputs.slack_messages }}
        # run only if QA channel id is set
        if: steps.get-qa-channel-id.outputs.QA_CHANNEL_ID != ''
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ steps.get-qa-channel-id.outputs.QA_CHANNEL_ID }}
          payload: |
            {
              "unfurl_links": false,
              "unfurl_media": false,
              "blocks": ${{ steps.move-cards.outputs.slack_messages }}
            }
